{"version":3,"file":"static/js/750.2c613ed8.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactsListItem/ContactListItem.module.css","components/ContactsListItem/ContactsListItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"formLabel\":\"ContactForm_formLabel__TSwxK\",\"formInput\":\"ContactForm_formInput__GszVU\",\"formButton\":\"ContactForm_formButton__TN6Jq\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/selectors';\nimport PropTypes from 'prop-types';\nimport css from './ContactForm.module.css';\nimport { useState } from 'react';\n\nexport const ContactForm = () => {\n\n    const contacts = useSelector(selectContacts);\n    const dispatch = useDispatch();\n    const [nameValue, setNameValue] = useState('');\n    const [numberValue, setNumberValue] = useState('');\n\n    const onSubmitCheckAndAdd = e => {\n        e.preventDefault();\n        const form = e.currentTarget;\n        const name = form.elements.name.value;\n        const phone = form.elements.number.value;\n        const newContact = {\n            name,\n            phone,\n        };\n\n        contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())\n            ? window.alert(`${name} is already in contacts`)\n            : dispatch(addContact(newContact));\n        \n        setNameValue('');\n        setNumberValue('');\n    };\n    \n    return (\n        <form className={css.form} onSubmit={onSubmitCheckAndAdd}>\n            <label className={css.formLabel}>Name</label>\n            <input\n                className={css.formInput}\n                type=\"text\"\n                name=\"name\"\n                autoComplete=\"off\"\n                value={nameValue}\n                onChange={e => setNameValue(e.target.value)}\n                label=\"Name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n            />\n            <label className={css.formLabel}>Number</label>\n            <input\n                className={css.formInput}\n                type=\"tel\"\n                name=\"number\"\n                autoComplete=\"off\"\n                value={numberValue}\n                onChange={e => setNumberValue(e.target.value)}\n                label=\"Number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n            />\n            <button className={css.formButton} type=\"submit\">Add contact</button>\n        </form>\n    );\n};\n\nContactForm.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        formName: PropTypes.string.isRequired,\n        formNumber: PropTypes.string.isRequired,\n    }))\n};\n\n// export default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactItem\":\"ContactList_contactItem__ppNQ5\",\"contactButton\":\"ContactList_contactButton__QiycO\"};","// extracted by mini-css-extract-plugin\nexport default {};","import { useDispatch } from 'react-redux';\nimport css from './ContactListItem.module.css';\nimport { setOpenedContactAction, showHideModalAction } from '../../redux/modal/modalSlice';\nimport PropTypes from 'prop-types';\n\nexport const ContactsListItem = ({ contact, id, name, number, onContactRemove }) => {\n  \n    const dispatch = useDispatch();\n\n  const handleEditContact = contact => {\n    dispatch(showHideModalAction());\n    dispatch(setOpenedContactAction(contact));\n  };\n  return (\n    <li\n      key={id}\n      className={css.item}\n      label={`${name}: ${number}`}\n      variant=\"outlined\"\n      onClick={() => handleEditContact(contact)}\n      onDelete={() => onContactRemove(id)}\n      >\n    </li>\n  );\n};\n\nContactsListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    number: PropTypes.string,\n  }),\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onContactRemove: PropTypes.func,\n};","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectFilter, selectIsLoading } from '../../redux/selectors';\nimport PropTypes from 'prop-types';\nimport css from './ContactList.module.css';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { ContactsListItem } from '../ContactsListItem/ContactsListItem';\n\nexport const ContactList = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n    const filter = useSelector(selectFilter);\n    const isLoading = useSelector(selectIsLoading);\n\n    const getFilteredContacts = () => {\n        return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n    };\n  const sortedContacts = getFilteredContacts().sort((a, b) => a.name.localeCompare(b.name));\n\n    const handleDeleteContact = id => {\n        dispatch(deleteContact(id));\n    };\n\n    const list = sortedContacts.map(contact => (\n        <ContactsListItem\n            key={contact.id}\n            contact={contact}\n            id={contact.id}\n            name={contact.name}\n            number={contact.number}\n            onContactRemove={handleDeleteContact}\n            filter={filter}\n        />\n    ));\n\n    return (\n        <>\n            {contacts.length > 0 && <ul className={css.contactsList}>{list}</ul>}\n            {(isLoading || contacts.length === 0) && <h4 className={css.empty}>You did not add any Contact yet...</h4>}\n        </>\n    );\n};\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n    }))\n};\n\n// export default ContactList;","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectError, selectIsLoading } from '../redux/selectors';\nimport { Loader } from '../components/Loader/Loader';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n    \n  return (\n    <>\n      {isLoading && !error && <Loader />}\n      <div>\n        <ContactForm />\n        <ContactList />\n      </div>\n    </>\n  );\n};\n\nexport default Contacts;"],"names":["ContactForm","contacts","useSelector","selectContacts","dispatch","useDispatch","useState","nameValue","setNameValue","numberValue","setNumberValue","className","css","onSubmit","e","preventDefault","form","currentTarget","name","elements","value","phone","number","newContact","find","contact","toLowerCase","window","alert","addContact","type","autoComplete","onChange","target","label","pattern","title","required","ContactsListItem","id","onContactRemove","variant","onClick","showHideModalAction","setOpenedContactAction","handleEditContact","onDelete","ContactList","filter","selectFilter","isLoading","selectIsLoading","sortedContacts","includes","sort","a","b","localeCompare","handleDeleteContact","deleteContact","list","map","length","error","selectError","useEffect","fetchContacts","Loader"],"sourceRoot":""}
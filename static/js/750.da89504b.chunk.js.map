{"version":3,"file":"static/js/750.da89504b.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactsListItem/ContactListItem.module.css","components/ContactsListItem/ContactsListItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"formLabel\":\"ContactForm_formLabel__TSwxK\",\"formInput\":\"ContactForm_formInput__GszVU\",\"formButton\":\"ContactForm_formButton__TN6Jq\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/selectors';\nimport PropTypes from 'prop-types';\nimport css from './ContactForm.module.css';\nimport { useState } from 'react';\n\nexport const ContactForm = () => {\n\n    const contacts = useSelector(selectContacts);\n    const dispatch = useDispatch();\n    const [nameValue, setNameValue] = useState('');\n    const [numberValue, setNumberValue] = useState('');\n\n    const onSubmitCheckAndAdd = e => {\n        e.preventDefault();\n        const form = e.currentTarget;\n        const name = form.elements.name.value;\n\n        contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())\n            ? window.alert(`${name} is already in contacts`)\n            : dispatch(addContact({\n                name: nameValue,\n                number: numberValue,\n            }));\n        \n        setNameValue('');\n        setNumberValue('');\n    };\n    \n    return (\n        <form className={css.form} onSubmit={onSubmitCheckAndAdd}>\n            <label className={css.formLabel}>Name</label>\n            <input\n                className={css.formInput}\n                type=\"text\"\n                name=\"name\"\n                autoComplete=\"off\"\n                value={nameValue}\n                onChange={e => setNameValue(e.target.value)}\n                label=\"Name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n            />\n            <label className={css.formLabel}>Number</label>\n            <input\n                className={css.formInput}\n                type=\"tel\"\n                name=\"number\"\n                autoComplete=\"off\"\n                value={numberValue}\n                onChange={e => setNumberValue(e.target.value)}\n                label=\"Number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n            />\n            <button className={css.formButton} type=\"submit\">Add contact</button>\n        </form>\n    );\n};\n\nContactForm.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        formName: PropTypes.string.isRequired,\n        formNumber: PropTypes.string.isRequired,\n    }))\n};\n\n// export default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactItem\":\"ContactList_contactItem__ppNQ5\",\"contactButton\":\"ContactList_contactButton__QiycO\"};","// extracted by mini-css-extract-plugin\nexport default {};","import { useDispatch } from 'react-redux';\nimport css from './ContactListItem.module.css';\nimport { setOpenedContactAction, showHideModalAction } from '../../redux/modal/modalSlice';\nimport PropTypes from 'prop-types';\n\nexport const ContactsListItem = ({ contact, id, name, number, onContactRemove }) => {\n  \n    const dispatch = useDispatch();\n\n  const handleEditContact = contact => {\n    dispatch(showHideModalAction());\n    dispatch(setOpenedContactAction(contact));\n  };\n  return (\n    <li\n      key={id}\n      className={css.item}\n      label={`${name}: ${number}`}\n      variant=\"outlined\"\n      onClick={() => handleEditContact(contact)}\n      onDelete={() => onContactRemove(id)}\n      >\n    </li>\n  );\n};\n\nContactsListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    number: PropTypes.string,\n  }),\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onContactRemove: PropTypes.func,\n};","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectFilter, selectIsLoading } from '../../redux/selectors';\nimport PropTypes from 'prop-types';\nimport css from './ContactList.module.css';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { ContactsListItem } from '../ContactsListItem/ContactsListItem';\n\nexport const ContactList = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n    const filter = useSelector(selectFilter);\n    const isLoading = useSelector(selectIsLoading);\n\n    const getFilteredContacts = () => {\n        return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n    };\n  const sortedContacts = getFilteredContacts().sort((a, b) => a.name.localeCompare(b.name));\n\n    const handleDeleteContact = id => {\n        dispatch(deleteContact(id));\n    };\n\n    const list = sortedContacts.map(contact => (\n        <ContactsListItem\n            key={contact.id}\n            contact={contact}\n            id={contact.id}\n            name={contact.name}\n            number={contact.number}\n            onContactRemove={handleDeleteContact}\n            filter={filter}\n        />\n    ));\n\n    return (\n        <>\n            {contacts.length > 0 && <ul className={css.contactsList}>{list}</ul>}\n            {(isLoading || contacts.length === 0) && <h4 className={css.empty}>You did not add any Contact yet...</h4>}\n        </>\n    );\n};\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n    }))\n};\n\n// export default ContactList;","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectError, selectIsLoading } from '../redux/selectors';\nimport { Loader } from '../components/Loader/Loader';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n    \n  return (\n    <>\n      {isLoading && !error && <Loader />}\n      <div>\n        <ContactForm />\n        <ContactList />\n      </div>\n    </>\n  );\n};\n\nexport default Contacts;"],"names":["ContactForm","contacts","useSelector","selectContacts","dispatch","useDispatch","useState","nameValue","setNameValue","numberValue","setNumberValue","className","css","onSubmit","e","preventDefault","name","currentTarget","elements","value","find","contact","toLowerCase","window","alert","addContact","number","type","autoComplete","onChange","target","label","pattern","title","required","ContactsListItem","id","onContactRemove","variant","onClick","showHideModalAction","setOpenedContactAction","handleEditContact","onDelete","ContactList","filter","selectFilter","isLoading","selectIsLoading","sortedContacts","includes","sort","a","b","localeCompare","handleDeleteContact","deleteContact","list","map","length","error","selectError","useEffect","fetchContacts","Loader"],"sourceRoot":""}